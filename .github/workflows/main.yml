name: CI/CD - Oi, Sumido Soluções Criativas

on:
  push:
    branches:
      - main # Roda apenas em push na branch main
  pull_request:
    branches:
      - main
  workflow_dispatch: # Permite acionamento manual (para o cleanup)

# Variaveis de ambiente globais
env:
  # CORREÇÃO: Usamos o secret, que garantimos estar em minúsculo ('jessicaapbueno')
  DOCKER_USER: ${{ secrets.DOCKER_USER }}
  # Esta variável agora usará o DOCKER_USER corrigido e ficará com o nome correto também
  SERVICE_NAME: ms-saudacoes-${{ secrets.DOCKER_USER }}

jobs:
  lint:
    name: Lint do Código
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do Código
        uses: actions/checkout@v4

      - name: Configurar Go
        uses: actions/setup-go@v5

      - name: Go Fmt & Vet
        run: |
          echo "Verificando formatação e fazendo lint do código..."
          go fmt $(go list ./...)
          go vet $(go list ./...)
      
      - name: Executar golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          args: --verbose

  test:
    name: Testes da Aplicação
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do Código
        uses: actions/checkout@v4

      - name: Configurar Go
        uses: actions/setup-go@v5

      - name: Instalar gotestsum
        run: go install gotest.tools/gotestsum@latest

      - name: Executar testes e gerar relatório
        run: |
          echo "Executando testes..."
          CGO_ENABLED=1 gotestsum --junitfile report.xml --format testname

  build-and-push:
    name: Construir e Publicar Imagem Docker
    needs: [lint, test] # Roda apenas se lint e test passarem
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do Código
        uses: actions/checkout@v4

      - name: Configurar QEMU
        uses: docker/setup-qemu-action@v3

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Construir e enviar imagem Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.DOCKER_USER }}/${{ env.SERVICE_NAME }}:latest
            ${{ env.DOCKER_USER }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy no Koyeb
    needs: build-and-push # Roda apenas depois do build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do Código
        uses: actions/checkout@v4

      - name: Configurar Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Executar Terraform Apply
        env:
          # Passa o token do Koyeb para o Terraform de forma segura
          TF_VAR_koyeb_token: ${{ secrets.KOYEB_TOKEN }}
          # Passa o nome completo da imagem Docker (já em minúsculas) para o Terraform
          TF_VAR_docker_image: ${{ env.DOCKER_USER }}/${{ env.SERVICE_NAME }}
        run: |
          cd infra
          terraform init
          terraform validate
          terraform apply --auto-approve

